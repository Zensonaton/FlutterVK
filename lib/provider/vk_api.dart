import "package:collection/collection.dart";
import "package:hooks_riverpod/hooks_riverpod.dart";
import "package:riverpod_annotation/riverpod_annotation.dart";

import "../api/vk/audio/add.dart";
import "../api/vk/audio/add_dislike.dart";
import "../api/vk/audio/delete.dart";
import "../api/vk/audio/edit.dart";
import "../api/vk/audio/get.dart";
import "../api/vk/audio/get_lyrics.dart";
import "../api/vk/audio/get_playlists.dart";
import "../api/vk/audio/get_stream_mix_audios.dart";
import "../api/vk/audio/restore.dart";
import "../api/vk/audio/search.dart";
import "../api/vk/audio/send_start_event.dart";
import "../api/vk/catalog/get_audio.dart";
import "../api/vk/catalog/get_audio_search.dart";
import "../api/vk/execute/mass_get_albums.dart";
import "../api/vk/execute/mass_get_audio.dart";
import "../api/vk/shared.dart";
import "../api/vk/users/get.dart";
import "../services/logger.dart";
import "auth.dart";

part "vk_api.g.dart";

/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞—Å—Å [VKAPI], –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π –¥–æ—Å—Ç—É–ø –∫ –º–µ—Ç–æ–¥–∞–º API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.
@riverpod
VKAPI vkAPI(Ref ref) => VKAPI(ref: ref);

/// –ö–ª–∞—Å—Å, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π –ø—Ä–æ—Å—Ç–æ–π –¥–æ—Å—Ç—É–ø –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.
///
/// –°—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ:
/// - [VKAPIUsers].
/// - [VKAPIAudio].
/// - [VKAPICatalog].
/// - [VKAPIExecute].
class VKAPI {
  /// –†–∞–∑–¥–µ–ª API, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (`users`).
  final VKAPIUsers users;

  /// –†–∞–∑–¥–µ–ª API, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏ (`audio`).
  final VKAPIAudio audio;

  /// –†–∞–∑–¥–µ–ª API, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ –∫–∞—Ç–∞–ª–æ–≥ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–µ–π (`catalog`).
  final VKAPICatalog catalog;

  /// –†–∞–∑–¥–µ–ª API, –¥–∞—é—â–∏–π –¥–æ—Å—Ç—É–ø –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Å–∫—Ä–∏–ø—Ç–∞–º  (`execute`).
  final VKAPIExecute execute;

  VKAPI({
    required Ref ref,
  })  : users = VKAPIUsers(ref: ref),
        audio = VKAPIAudio(ref: ref),
        catalog = VKAPICatalog(ref: ref),
        execute = VKAPIExecute(ref: ref);
}

/// –ö–∞—Ç–µ–≥–æ—Ä–∏—è API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.
class VKAPICategory {
  final Ref _ref;

  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–∫–µ–Ω –í–ö–æ–Ω—Ç–∞–∫—Ç–µ. (Kate Mobile)
  String get token => _ref.read(tokenProvider)!;

  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ç–æ—Ä–∏—á–Ω—ã–π —Ç–æ–∫–µ–Ω –í–ö–æ–Ω—Ç–∞–∫—Ç–µ. (VK Admin)
  String? get secondaryToken => _ref.read(secondaryTokenProvider);

  VKAPICategory({
    required Ref ref,
  }) : _ref = ref;
}

/// –ö–ª–∞—Å—Å, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π –¥–æ—Å—Ç—É–ø –∫ –º–µ—Ç–æ–¥–∞–º API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ, —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (`users`).
class VKAPIUsers extends VKAPICategory {
  VKAPIUsers({
    required super.ref,
  });

  /// {@macro VKAPI.users.get}
  Future<List<APIUser>> get(List<int> ids) => users_get(ids: ids);
}

/// –ö–ª–∞—Å—Å, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π –¥–æ—Å—Ç—É–ø –∫ –º–µ—Ç–æ–¥–∞–º API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ, —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—è–º–∏ (`audio`).
class VKAPIAudio extends VKAPICategory {
  VKAPIAudio({
    required super.ref,
  });

  /// {@macro VKAPI.audio.addDislike}
  Future<bool> addDislike(List<String> mediaKeys) =>
      audio_add_dislike(mediaKeys);

  /// {@macro VKAPI.audio.add}
  Future<int> add(int id, int ownerID) => audio_add(id, ownerID);

  /// {@macro VKAPI.audio.delete}
  Future<bool> delete(int id, int ownerID) => audio_delete(id, ownerID);

  /// {@macro VKAPI.audio.edit}
  Future<int> edit(
    int id,
    int ownerID,
    String title,
    String artist,
    int genreID,
  ) =>
      audio_edit(id, ownerID, title, artist, genreID);

  /// {@macro VKAPI.audio.getLyrics}
  Future<APIAudioGetLyricsResponse> getLyrics(String mediaKey) =>
      audio_get_lyrics(mediaKey);

  /// {@macro VKAPI.audio.getPlaylists}
  Future<APIAudioGetPlaylistsResponse> getPlaylists(int ownerID) =>
      audio_get_playlists(ownerID);

  /// {@macro VKAPI.audio.getStreamMixAudios}
  Future<List<Audio>> getStreamMixAudios({
    String mixID = "common",
    int count = 10,
  }) =>
      audio_get_stream_mix_audios(mixID, count);

  /// {@macro VKAPI.audio.getStreamMixAudios}
  ///
  /// –í –æ—Ç–ª–∏—á–∏–∏ –æ—Ç [getStreamMixAudios], –¥–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç—Ä–µ–∫–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏—Ö –∞–ª—å–±–æ–º–∞—Ö.
  Future<List<Audio>> getStreamMixAudiosWithAlbums({
    String mixID = "common",
    int count = 10,
  }) async {
    final logger = getLogger("getStreamMixAudiosWithAlbums");
    final api = _ref.read(vkAPIExecuteProvider);

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤.
    final List<Audio> response = await getStreamMixAudios(
      mixID: mixID,
      count: count,
    );

    // –ò–Ω–æ–≥–¥–∞ VK Mix –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç—Ä–µ–∫–∏ –±–µ–∑ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏.
    // –°–∞–º –±—ã–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–¥–∏–≤–ª—ë–Ω, –∫–æ–≥–¥–∞ —É–≤–∏–¥–µ–ª, —á—Ç–æ VK Mix –≤–µ—Ä–Ω—É–ª –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç—Ä–µ–∫. üëç
    for (final audio in response) {
      if (audio.url != null) continue;

      logger.w(
        "VK Mix returned an audio without a URL (e.g., unavailable audio): $audio",
      );
      response.remove(audio);
    }

    // –ï—Å–ª–∏ –≤—Ç–æ—Ä–∏—á–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
    if (this.secondaryToken == null) return response;

    final albums = await api.massGetAlbums(
      response
          .map(
            (audio) => audio.mediaKey,
          )
          .toList(),
    );

    return response.map(
      (audio) {
        audio.album = albums
            .firstWhereOrNull(
              (albumAudio) =>
                  albumAudio.ownerID == audio.ownerID &&
                  albumAudio.id == audio.id,
            )
            ?.album;

        return audio;
      },
    ).toList();
  }

  /// {@macro VKAPI.audio.get}
  Future<APIAudioGetResponse> get(int userID) => audio_get(userID);

  /// {@macro VKAPI.audio.get}
  ///
  /// –í –æ—Ç–ª–∏—á–∏–∏ –æ—Ç [get], –¥–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫ —Ç—Ä–µ–∫–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Ö –∞–ª—å–±–æ–º–∞—Ö. –ï—Å–ª–∏ –≤–∞–º —ç—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ, —Ç–æ –ª–∏–±–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ—Ç–æ–¥–æ–º [get], –ª–∏–±–æ –ø–µ—Ä–µ–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–∑ [Audio.id] —Ç—Ä–µ–∫–æ–≤ –≤ [audiosWithKnownAlbums].
  Future<APIMassAudioGetResponse> getWithAlbums(
    int ownerID, {
    int? albumID,
    String? accessKey,
    List<int> audiosWithKnownAlbums = const [],
  }) async {
    final api = _ref.read(vkAPIExecuteProvider);

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤.
    final APIMassAudioGetResponse response = await api.massGetAudio(
      ownerID,
      albumID: albumID,
      accessKey: accessKey,
    );

    // –ï—Å–ª–∏ –≤—Ç–æ—Ä–∏—á–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
    if (this.secondaryToken == null) return response;

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ —Ç—Ä–µ–∫–æ–≤, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∞–ª—å–±–æ–º—ã.
    final audiosToRetrieve = response.audios
        .where(
          (audio) => !audiosWithKnownAlbums.contains(audio.id),
        )
        .map(
          (audio) => audio.mediaKey,
        )
        .toList();

    if (audiosToRetrieve.isEmpty) return response;

    final albums = await api.massGetAlbums(audiosToRetrieve);

    return APIMassAudioGetResponse(
      audioCount: response.audioCount,
      audios: response.audios.map((audio) {
        audio.album = albums
            .firstWhereOrNull(
              (albumAudio) =>
                  albumAudio.ownerID == audio.ownerID &&
                  albumAudio.id == audio.id,
            )
            ?.album;

        return audio;
      }).toList(),
      playlistsCount: response.playlistsCount,
      playlists: response.playlists,
    );
  }

  /// {@macro VKAPI.audio.restore}
  Future<Audio> restore(int id, int ownerID) => audio_restore(id, ownerID);

  /// {@macro VKAPI.audio.search}
  Future<APIAudioSearchResponse> search(
    String query, {
    bool autoComplete = true,
    int count = 50,
    int offset = 0,
  }) =>
      audio_search(
        query,
        autoComplete: autoComplete,
        count: count,
        offset: offset,
      );

  /// {@macro VKAPI.audio.search}
  ///
  /// –í –æ—Ç–ª–∏—á–∏–∏ –æ—Ç [search], –¥–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç—Ä–µ–∫–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏—Ö –∞–ª—å–±–æ–º–∞—Ö.
  Future<APIAudioSearchResponse> searchWithAlbums(
    String query, {
    bool autoComplete = true,
    int count = 50,
    int offset = 0,
  }) async {
    final api = _ref.read(vkAPIExecuteProvider);

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤.
    final APIAudioSearchResponse response = await search(
      query,
      autoComplete: autoComplete,
      count: count,
      offset: offset,
    );

    // –ï—Å–ª–∏ –≤—Ç–æ—Ä–∏—á–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
    if (this.secondaryToken == null) return response;

    final List<Audio> albums = await api.massGetAlbums(
      response.items.map((audio) => audio.mediaKey).toList(),
    );

    return APIAudioSearchResponse(
      count: response.count,
      items: response.items.map((audio) {
        audio.album = albums
            .firstWhereOrNull(
              (albumAudio) =>
                  albumAudio.ownerID == audio.ownerID &&
                  albumAudio.id == audio.id,
            )
            ?.album;

        return audio;
      }).toList(),
    );
  }

  /// {@macro VKAPI.audio.sendStartEvent}
  Future<dynamic> sendStartEvent(String mediaKey) =>
      audio_send_start_event(mediaKey);
}

/// –ö–ª–∞—Å—Å, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π –¥–æ—Å—Ç—É–ø –∫ –º–µ—Ç–æ–¥–∞–º API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ, —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–µ–π (`catalog`).
class VKAPICatalog extends VKAPICategory {
  VKAPICatalog({
    required super.ref,
  });

  /// {@macro VKAPI.catalog.getAudio}
  Future<APICatalogGetAudioResponse> getAudio() => catalog_get_audio();

  /// {@macro VKAPI.catalog.getAudioSearch}
  Future<APICatalogGetAudioSearchResponse> getAudioSearch() =>
      catalog_get_audio_search();
}

/// –ö–ª–∞—Å—Å, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π –¥–æ—Å—Ç—É–ø –∫ helper-–º–µ—Ç–æ–¥–∞–º –¥–ª—è API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ —É–¥–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ `execute`-—Å–∫—Ä–∏–ø—Ç–∞–º.
class VKAPIExecute extends VKAPICategory {
  VKAPIExecute({
    required super.ref,
  });

  /// {@macro VKAPI.execute.massGetAlbums}
  Future<List<Audio>> massGetAlbums(List<String> mediaKeys) =>
      execute_mass_get_albums(mediaKeys);

  /// {@macro VKAPI.execute.massGetAudio}
  Future<APIMassAudioGetResponse> massGetAudio(
    int ownerID, {
    int? albumID,
    String? accessKey,
  }) =>
      execute_mass_get_audio(
        ownerID,
        albumID: albumID,
        accessKey: accessKey,
      );
}

/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ —Ç–∏–ø–∞ [VKAPIUsers].
///
/// –í–º–µ—Å—Ç–æ –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å [vkAPIProvider].
@riverpod
VKAPIUsers vkAPIUsers(Ref ref) => VKAPIUsers(ref: ref);

/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ —Ç–∏–ø–∞ [VKAPIAudio].
///
/// –í–º–µ—Å—Ç–æ –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å [vkAPIProvider].
@riverpod
VKAPIAudio vkAPIAudio(Ref ref) => VKAPIAudio(ref: ref);

/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ —Ç–∏–ø–∞ [VKAPICatalog].
///
/// –í–º–µ—Å—Ç–æ –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å [vkAPIProvider].
@riverpod
VKAPICatalog vkAPICatalog(Ref ref) => VKAPICatalog(ref: ref);

/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ —Ç–∏–ø–∞ [VKAPIExecute].
///
/// –í–º–µ—Å—Ç–æ –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å [vkAPIProvider].
@riverpod
VKAPIExecute vkAPIExecute(Ref ref) => VKAPIExecute(ref: ref);
